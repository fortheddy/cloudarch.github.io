<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>查询并禁用删除阿里云中长期未登陆的子帐号</title>
    <link href="/2022/10/05/%E6%9F%A5%E8%AF%A2%E5%B9%B6%E7%A6%81%E7%94%A8%E5%88%A0%E9%99%A4%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%AD%E9%95%BF%E6%9C%9F%E6%9C%AA%E7%99%BB%E5%BD%95%E7%9A%84%E5%AD%90%E5%B8%90%E5%8F%B7/"/>
    <url>/2022/10/05/%E6%9F%A5%E8%AF%A2%E5%B9%B6%E7%A6%81%E7%94%A8%E5%88%A0%E9%99%A4%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%AD%E9%95%BF%E6%9C%9F%E6%9C%AA%E7%99%BB%E5%BD%95%E7%9A%84%E5%AD%90%E5%B8%90%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># @FileName  :aliyun_user_check.py</span><br><span class="hljs-comment"># @Time      :2022/8/15</span><br><span class="hljs-comment"># @Author    :</span><br><span class="hljs-comment"># @Description：查询一段时间未登陆的阿里云RAM账号并禁用或删除</span><br><span class="hljs-comment"># 参考链接：</span><br><span class="hljs-comment"># https://next.api.aliyun.com/api/Ram/2015-05-01/GetUser?params=&#123;&#125;&amp;tab=DEBUG</span><br><span class="hljs-comment"># https://next.api.aliyun.com/api/Ram/2015-05-01/ListUsers?lang=JAVA&amp;params=&#123;&#125;&amp;tab=DEBUG</span><br><span class="hljs-comment"># https://help.aliyun.com/document_detail/62184.html</span><br><span class="hljs-comment"># 获取临时秘钥：https://help.aliyun.com/document_detail/158690.html</span><br><br><span class="hljs-comment"># import click</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> alibabacloud_ram20150501.client <span class="hljs-keyword">import</span> Client <span class="hljs-keyword">as</span> Ram20150501Client<br><span class="hljs-keyword">from</span> alibabacloud_tea_openapi <span class="hljs-keyword">import</span> models <span class="hljs-keyword">as</span> open_api_models<br><span class="hljs-keyword">from</span> alibabacloud_ram20150501 <span class="hljs-keyword">import</span> models <span class="hljs-keyword">as</span> ram_20150501_models<br><span class="hljs-keyword">from</span> alibabacloud_tea_util <span class="hljs-keyword">import</span> models <span class="hljs-keyword">as</span> util_models<br><span class="hljs-keyword">from</span> alibabacloud_tea_util.client <span class="hljs-keyword">import</span> Client <span class="hljs-keyword">as</span> UtilClient<br><br><span class="hljs-comment"># 访问的域名</span><br>ENDPOINT = <span class="hljs-string">&#x27;ram.aliyuncs.com&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_client</span>(<span class="hljs-params">access_key_id, access_key_secret</span>):<br>    <span class="hljs-comment"># 您的AccessKey ID和AccessKey Secret</span><br>    config = open_api_models.Config(access_key_id=access_key_id, access_key_secret=access_key_secret)<br>    <span class="hljs-comment"># 访问的域名</span><br>    config.endpoint = ENDPOINT<br>    <span class="hljs-keyword">return</span> Ram20150501Client(config)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_info</span>(<span class="hljs-params">days, client</span>):<br>    _all_users_list = []<br><br>    isTruncated = <span class="hljs-literal">True</span><br>    marker = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">while</span> isTruncated:<br>        list_users_request = ram_20150501_models.ListUsersRequest(marker=marker)<br>        runtime = util_models.RuntimeOptions()<br>        resp = client.list_users_with_options(list_users_request, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>]<br>        _all_users_list.extend(resp[<span class="hljs-string">&#x27;Users&#x27;</span>][<span class="hljs-string">&#x27;User&#x27;</span>])<br>        isTruncated = resp[<span class="hljs-string">&#x27;IsTruncated&#x27;</span>]<br>        <span class="hljs-keyword">if</span> isTruncated <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>            marker = resp[<span class="hljs-string">&#x27;Marker&#x27;</span>]<br><br>    inactive_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> _all_users_list:<br>        get_user_request = ram_20150501_models.GetUserRequest(user_name=i[<span class="hljs-string">&#x27;UserName&#x27;</span>])<br>        runtime = util_models.RuntimeOptions()<br>        _resp = client.get_user_with_options(get_user_request, runtime)<br>        _user = _resp.to_map()[<span class="hljs-string">&#x27;body&#x27;</span>][<span class="hljs-string">&#x27;User&#x27;</span>]<br><br>        <span class="hljs-keyword">if</span> _user[<span class="hljs-string">&#x27;LastLoginDate&#x27;</span>] == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        _last_login = datetime.strptime(_user[<span class="hljs-string">&#x27;LastLoginDate&#x27;</span>].split(<span class="hljs-string">&#x27;T&#x27;</span>)[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>        _delta = datetime.now() - _last_login<br>        <span class="hljs-keyword">if</span> _delta.days &gt;= days:<br>            inactive_list.append(_user)<br><br>    <span class="hljs-comment"># print(f&#x27;共发现&#123;len(user_list)&#125;个阿里云RAM用户超过&#123;days&#125;天未连续！！！&#x27;)</span><br>    <span class="hljs-keyword">return</span> inactive_list<br><br><br><span class="hljs-comment"># @click.command()</span><br><span class="hljs-comment"># @click.option(&#x27;--days&#x27;, default=30, help=&#x27;最后一次登陆阿里云页面距离今天的天数，默认为30天&#x27;)</span><br><span class="hljs-comment"># @click.option(&#x27;--disableLogin&#x27;, default=False, help=&#x27;是否禁止用户通过网页登陆阿里云&#x27;)</span><br><span class="hljs-comment"># @click.option(&#x27;--deleteRAM&#x27;, default=False, help=&#x27;是否删除RAM子账号&#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">disable_user_login</span>(<span class="hljs-params">ak, sk, days, disableLogin, deleteRAM</span>):<br>    client = create_client(ak, sk)<br>    disable_users = <span class="hljs-number">0</span><br>    delete_users = <span class="hljs-number">0</span><br><br>    user_list = get_user_info(days, client)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(user_list) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;没有发现连续<span class="hljs-subst">&#123;days&#125;</span>天未登陆的RAM用户！！！&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;共发现<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(user_list)&#125;</span>个阿里云RAM用户连续超过<span class="hljs-subst">&#123;days&#125;</span>天未登陆！&#x27;</span>)<br>    <span class="hljs-comment"># for i in user_list:</span><br>    <span class="hljs-comment">#     print(i)</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(disableLogin).lower() == <span class="hljs-string">&#x27;true&#x27;</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> user_list:<br>            _name = i[<span class="hljs-string">&#x27;UserName&#x27;</span>]<br>            <span class="hljs-comment"># SAMPLE：</span><br>            <span class="hljs-comment"># &#123;</span><br>            <span class="hljs-comment">#     &#x27;DisplayName&#x27;: &#x27;RAM权限测试&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;Email&#x27;: &#x27;&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;UpdateDate&#x27;: &#x27;2022-07-14T06: 02: 14Z&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;MobilePhone&#x27;: &#x27;&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;UserId&#x27;: &#x27;273491157765178100&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;Comments&#x27;: &#x27;&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;LastLoginDate&#x27;: &#x27;2022-07-14T06: 02: 14Z&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;CreateDate&#x27;: &#x27;2022-07-14T02: 19: 38Z&#x27;,</span><br>            <span class="hljs-comment">#     &#x27;UserName&#x27;: &#x27;test&#x27;</span><br>            <span class="hljs-comment"># &#125;</span><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 查询用户登陆信息</span><br>                <span class="hljs-comment"># get_request = ram_20150501_models.GetLoginProfileRequest(user_name=_name)</span><br>                <span class="hljs-comment"># runtime = util_models.RuntimeOptions()</span><br>                <span class="hljs-comment"># _get_resp = client.get_login_profile_with_options(get_request, runtime).to_map()[&#x27;body&#x27;]</span><br>                <span class="hljs-comment"># print(_get_resp)</span><br>                <span class="hljs-comment"># continue</span><br><br>                disable_req = ram_20150501_models.DeleteLoginProfileRequest(user_name=_name)<br>                runtime = util_models.RuntimeOptions()<br>                <span class="hljs-comment"># 调用DeleteLoginProfile接口关闭指定RAM用户登录Web控制台的功能。</span><br>                disable_resp = client.delete_login_profile_with_options(disable_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;已禁止RAM用户：<span class="hljs-subst">&#123;_name&#125;</span>通过网页登陆，request_id为<span class="hljs-subst">&#123;disable_resp&#125;</span>&#x27;</span>)<br>                disable_users += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-comment"># 如有需要，请打印 error</span><br>                UtilClient.assert_as_string(e.message)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;查询用户：<span class="hljs-subst">&#123;_name&#125;</span>的登陆信息时出现错误：\n错误代码：<span class="hljs-subst">&#123;e.code&#125;</span>\n错误信息：<span class="hljs-subst">&#123;e.message&#125;</span>\n接口返回：<span class="hljs-subst">&#123;e.data&#125;</span>&#x27;</span>)<br>                <span class="hljs-comment"># err = e.args</span><br>                <span class="hljs-comment"># _err_code = e.code</span><br>                <span class="hljs-comment"># _err_msg = e.message</span><br>                _err_resp = e.data<br>                <span class="hljs-keyword">if</span> _err_resp[<span class="hljs-string">&#x27;statusCode&#x27;</span>] == <span class="hljs-number">404</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;未查询到用户：<span class="hljs-subst">&#123;_name&#125;</span>的登陆信息，可能用户已被禁止登陆&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(deleteRAM).lower() == <span class="hljs-string">&#x27;true&#x27;</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> user_list:<br>            _name = i[<span class="hljs-string">&#x27;UserName&#x27;</span>]<br><br>            <span class="hljs-comment"># 如果RAM账号下有Access Key则跳过，不删除此账号</span><br>            list_ak_req = ram_20150501_models.ListAccessKeysRequest(user_name=_name)<br>            runtime = util_models.RuntimeOptions()<br>            ak_list = client.list_access_keys_with_options(list_ak_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>][<span class="hljs-string">&#x27;AccessKeys&#x27;</span>][<span class="hljs-string">&#x27;AccessKey&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ak_list) != <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;账号：<span class="hljs-subst">&#123;_name&#125;</span>下有Access Key，暂不删除此账号！！！&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># 查询ram账号所属的用户组并删除</span><br>                list_groups_req = ram_20150501_models.ListGroupsForUserRequest(user_name=_name)<br>                runtime = util_models.RuntimeOptions()<br>                group_list = \<br>                    client.list_groups_for_user_with_options(list_groups_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>][<span class="hljs-string">&#x27;Groups&#x27;</span>][<br>                        <span class="hljs-string">&#x27;Group&#x27;</span>]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(group_list) != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _g <span class="hljs-keyword">in</span> group_list:<br>                        _remove_group_req = ram_20150501_models.RemoveUserFromGroupRequest(user_name=_name,group_name=_g[<span class="hljs-string">&#x27;GroupName&#x27;</span>])<br>                        runtime = util_models.RuntimeOptions()<br>                        _remove_group_resp = \<br>                            client.remove_user_from_group_with_options(_remove_group_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>]<br>                        <span class="hljs-comment"># print(&#x27;将用户从组中移除：&#x27;, _remove_group_resp, _remove_group_resp.items())</span><br><br>                <span class="hljs-comment"># 查询ram账号直接具有的权限策略并删除</span><br>                list_policies_req = ram_20150501_models.ListPoliciesForUserRequest(user_name=_name)<br>                runtime = util_models.RuntimeOptions()<br>                policy_list = \<br>                    client.list_policies_for_user_with_options(list_policies_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>][<span class="hljs-string">&quot;Policies&quot;</span>][<span class="hljs-string">&#x27;Policy&#x27;</span>]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(policy_list) != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">for</span> _p <span class="hljs-keyword">in</span> policy_list:<br>                        _detach_policy_req = ram_20150501_models.DetachPolicyFromUserRequest(user_name=_name,policy_name=_p[<span class="hljs-string">&#x27;PolicyName&#x27;</span>],policy_type=_p[<span class="hljs-string">&#x27;PolicyType&#x27;</span>])<br>                        runtime = util_models.RuntimeOptions()<br>                        _detach_policy_resp = client.detach_policy_from_user_with_options(_detach_policy_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>]<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;已删除用户<span class="hljs-subst">&#123;_name&#125;</span>具有的权限策略：&#x27;</span>, _p[<span class="hljs-string">&#x27;PolicyName&#x27;</span>])<br><br>                <span class="hljs-comment"># print(f&#x27;用户：&#123;_name&#125;当前具有的权限为：&#123;policy_list&#125;&#x27;)</span><br><br>                delete_req = ram_20150501_models.DeleteUserRequest(user_name=_name)<br>                runtime = util_models.RuntimeOptions()<br>                <span class="hljs-comment"># 调用DeleteUser接口删除一个RAM用户</span><br>                delete_resp = client.delete_user_with_options(delete_req, runtime).to_map()[<span class="hljs-string">&#x27;body&#x27;</span>]<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;已删除RAM账号：<span class="hljs-subst">&#123;_name&#125;</span>, request_id为<span class="hljs-subst">&#123;delete_resp&#125;</span>, 用户详细信息：\n<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>                delete_users += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-comment"># 如有需要，请打印 error</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;查询用户：<span class="hljs-subst">&#123;_name&#125;</span>的登陆信息时出现错误：\n错误代码：<span class="hljs-subst">&#123;e.code&#125;</span>\n错误信息：<span class="hljs-subst">&#123;e.message&#125;</span>\n接口返回：<span class="hljs-subst">&#123;e.data&#125;</span>&#x27;</span>)<br>                _err_resp = e.data<br>                <span class="hljs-keyword">if</span> _err_resp[<span class="hljs-string">&#x27;statusCode&#x27;</span>] == <span class="hljs-number">404</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;未查询到用户：<span class="hljs-subst">&#123;_name&#125;</span>的登陆信息，可能用户已被删除&#x27;</span>)<br>                <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;程序运行结束，共发现<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(user_list)&#125;</span>个超过连续<span class="hljs-subst">&#123;days&#125;</span>天未登陆的RAM账号！&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;本次共禁用<span class="hljs-subst">&#123;disable_users&#125;</span>个账号，删除<span class="hljs-subst">&#123;delete_users&#125;</span>个账号&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ak = os.environ.get(<span class="hljs-string">&#x27;ak&#x27;</span>)<br>    sk = os.environ.get(<span class="hljs-string">&#x27;sk&#x27;</span>)<br>    disable_user_login(ak, sk, <span class="hljs-number">90</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>aliyun</tag>
      
      <tag>ram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装配置Prometheus + Grafana运维监控平台</title>
    <link href="/2022/10/05/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEPrometheus%20+%20Grafana%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/"/>
    <url>/2022/10/05/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEPrometheus%20+%20Grafana%E8%BF%90%E7%BB%B4%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、安装配置Prometheus"><a href="#一、安装配置Prometheus" class="headerlink" title="一、安装配置Prometheus"></a>一、安装配置Prometheus</h2><p>1、下载Prometheus和node_exporter安装包并解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://github.com/prometheus/prometheus/releases/download/v2.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>/prometheus-<span class="hljs-number">2</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">tar</span> -xvzf prometheus-<span class="hljs-number">2</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">wget</span> https://github.com/prometheus/node_exporter/releases/download/v0.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>/node_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br><span class="hljs-attribute">tar</span> -zxvf node_exporter-<span class="hljs-number">0</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.linux-amd64.tar.gz<br></code></pre></td></tr></table></figure><p>2、修改prometheus.yml文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">scrape_configs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: &#x27;prometheus&#x27;</span><br><br>    <span class="hljs-comment"># metrics_path defaults to &#x27;/metrics&#x27;</span><br>    <span class="hljs-comment"># scheme defaults to &#x27;http&#x27;.</span><br><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;192.168.1.135:9090&#x27;]</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">job_name: node_exporter</span><br>    <span class="hljs-attribute">static_configs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">targets: [&#x27;192.168.1.135:9100&#x27;]</span><br></code></pre></td></tr></table></figure><p>prometheus默认运行在9090端口，node_exporter默认运行在9100端口</p><p>targets中为被监控的机器节点，可以并列写入多个节点，用逗号分隔。</p><p>3、启动prometheus和node_exporter</p><p># 方法a、直接后台启动（停止时需要通过ps命令找到进程id后手动kill）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ./prometheus --config.file=prometheus.yml &amp;<br><span class="hljs-built_in">nohup</span> ./node_exporter &amp;<br></code></pre></td></tr></table></figure><p># 方法b、注册系统服务</p><p>vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;prometheus.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Prometheus Server<br><span class="hljs-attr">Documentation</span>=https://prometheus.io/docs/introduction/overview/<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">ExecStart</span>=/data/prometheus-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>.linux-amd64/prometheus --config.file=/data/prometheus-<span class="hljs-number">2.8</span>.<span class="hljs-number">0</span>.linux-amd64/prometheus.yml<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;node_exporter.service</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=node_exporter<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><span class="hljs-attr">ExecStart</span>=/data/node_exporter-<span class="hljs-number">0.17</span>.<span class="hljs-number">0</span>.linux-amd64/node_exporter<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl start prometheus<br><span class="hljs-params">system</span>ctl start node_exporter<br></code></pre></td></tr></table></figure><p>4、浏览器登录<a href="http://192.168.1.135:9090/graph">http://192.168.1.135:9090/graph</a></p><h2 id="二、安装配置Grafana"><a href="#二、安装配置Grafana" class="headerlink" title="二、安装配置Grafana"></a>二、安装配置Grafana</h2><p>1、下载并安装Grafana</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://dl.grafana.com/oss/release/grafana-<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.x86_64.rpm<br><span class="hljs-attribute">sudo</span> yum localinstall grafana-<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.x86_64.rpm<br></code></pre></td></tr></table></figure><p>2、启动grafana</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">systemctl <span class="hljs-keyword">start</span> grafana-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>3、浏览器登录<a href="http://192.168.1.135:3000/login">http://192.168.1.135:3000/login</a> ，初始登录时会有一个默认用户名密码admin&#x2F;admin</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】写给VMware用户看的Kubernetes扫盲贴</title>
    <link href="/2022/10/05/%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4/"/>
    <url>/2022/10/05/%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4/</url>
    
    <content type="html"><![CDATA[<p>容器技术是最近几年非常热门的技术，它似乎就是为云端的应用量身定制的，所以它也被贴上了云原生应用 (Cloud Native  Application) 技术的标签。目前最为流行的容器管理调度平台是 Kubernetes (缩写为 K8s)，是 Google  为支持大批量容器而开发的企业级运行平台，可以支持负载均衡、高可靠等生产级功能。VMware 在 VMworld 2017 上也宣布了跟  Pivotal、Google 合作开发的 VMware Pivotal Container Service，这是一个商用的 K8s 平台，简称  PKS (中间的K代表 Kubernetes)。</p><p>我们专门为 VMware 用户写了这篇文章，利用你所熟悉的 vSphere 平台来跟 K8s 作一个类比，从而帮助你快速了解 K8s。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-architecture.png" alt="kubernetes-architecture"></p><p>那么到底什么是 Kubernetes 呢? 简单来说，K8s 和容器的关系就相当于vSphere和虚机的关系。在 VMware  发展早期的时候，那时候只有 VMware Workstation，后来出现了基于vCenter 和ESXi 的VI&#x2F;vSphere  体系架构，从而使虚拟化步入了数据中心。同样的，容器一开始的时候只有一个简单的容器引擎 Docker，K8s  的出现为容器提供了一个生产级的运行环境。把 vSphere 和 K8s  平台肩并肩放在一起比较的话，你会发现它们的概念有很多类似之处，这可以帮助我们很快地理解 K8s 技术的各种细节。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/p2p3.png" alt="p2p3"></p><p>就像 vSphere 平台上的 vCenter 和 ESXi 主机， K8s 平台上也有对应的概念：Master 和节点 (node)，  Master 起到的作用就跟 vCenter 一样，对整个 K8s 集群进行管理，它也是工作负载管理 API 的访问入口。跟 ESXi  主机对应的就是K8s节点，节点是 K8s 集群中的计算资源，容器就是运行在节点上，节点可以是虚机或者物理服务器。K8s 也有一个类似于  vCenter DB 的数据库 “etcd”，它以的“键-值”方式存储了整个集群的配置和状态。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-system.png" alt="kubernetes-system"></p><p>跟 vSphere 不同的是，K8s Master上也能运行容器负载，当然 vCenter Server 上是不运行虚机的。虽然 K8s  Master 也是一种计算资源，但是一般只在上面运行系统管理相关的容器应用，普通的应用负载不应该放在 Master 上。</p><p>vSphere 有GUI 管理界面 Web Client 和命令行管理接口 vCLI 和 Power CLI，K8s 也提供了GUI  界面或命令行来管理 K8s 集群。下面截屏是使用命令 “kubectl.exe” 来管理K8s 集群的例子，我们可以看到这个集群有一个  Master (vkubemaster007) 和4个节点 (vkubemode017~18)，K8s  的版本是v1.6.5，节点上的操作系统是Ubuntu 16.04。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-command-line.png" alt="kubernetes-command-line"></p><h3 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h3><p>vSphere 中的工作负载调度单位是虚机， K8s 中的调度单位是Pod；一台ESXi 主机上可以运行多个虚机，一个 K8s  节点上也可以运行多个 Pod，每个 Pod 都有一个独立的 IP 地址来跟其他的 Pod 相通讯。在vSphere  环境中，应用运行在虚机的操作系统中，K8s 平台上应用运行在容器里；一个虚机中只能运行一个操作系统实例，而一个 Pod  中可以运行多个容器实例。K8s 会考虑到 Pod 的关联性而把 Pod  中的容器实例运行在同一个节点上，从而让他们共享同一个运行环境；一般是把一个应用和它相关的辅助模块设计在同一个 Pod  中，然后作为一个整体来进行调度运行。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-pods.png" alt="kubernetes-pods"></p><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><p>K8s 可以通过一个YAML (Yet Another Markup Language) 文件来定义和描述 K8s  集群的配置和状态，然后就可以基于该文件创建整个 K8s 集群，K8s 会尽力地保持集群运行在指定的状态。例如，如果你指定了某一个 Pod  要有4个副本，K8s 就会监控所有这些 Pod 的运行，如果有任何一个 Pod 工作异常的话，它就会设法修复这个状态，实在不行的话就另启一个  Pod 副本。</p><p>要理解 YAML 配置文件的话，你可以把它对应为虚机的 .VMX 文件，或是 Virtual Appliance 的 .OVF 文件。当然，YAML 配置文件在 K8s 中不仅用于定义集群，也用于定义其他的组件，如： 副本集合、服务、部署等。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-pods.png" alt="kubernetes-pods"></p><h3 id="虚拟集群"><a href="#虚拟集群" class="headerlink" title="虚拟集群"></a>虚拟集群</h3><p>vSphere 中为了管理资源的分配专门有一个“资源池 (Resource  Pool)”的概念，就像是在物理集群中划分出了一些小的虚拟集群，vSphere 利用资源池来控制资源的分配。K8s  也有类似的概念叫“namespaces”，namespace 的主要用途是创建多租户环境，也可以在上面指定资源配额 (Resource  Quota) 。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-namespaces.png" alt="kubernetes-namespaces"></p><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>vSphere 需要指定每一个 Resource Pool 的资源分配限额，K8s 可以在 namespace 上设置资源配额 (Resource Quotas) 来控制资源分配，这是在 YAML 配置文件中定义的。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-resource-quotas.png" alt="kubernetes-resource-quotas"></p><h3 id="工作负载标记"><a href="#工作负载标记" class="headerlink" title="工作负载标记"></a>工作负载标记</h3><p>这在 vSphere 和 K8s 中几乎是完全一致的，vSphere 使用 tag 标签来标识虚机，而 K8s 使用标签 (label) 来标识容器。所不同的是，K8s 中标签是必须的，而不是可选的。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-labels.png" alt="kubernetes-labels"></p><h3 id="计算冗余"><a href="#计算冗余" class="headerlink" title="计算冗余"></a>计算冗余</h3><p>vSphere 中有 Fault Tolerance  技术来提供计算资源的冗余，受保护的虚机运行在一台服务器上，另一台服务器上有一个从被保护虚机复制而来的影子 (Shadow)，FT 技术通过  Lockstep  来同步主虚机和影子虚机之间的数据和状态。正常情况下影子虚机是不工作的，当主服务器宕机时，影子虚机立刻被激活成主虚机，并继续主虚机工作；这时  vSphere 会设法在集群中找到另一台合适的服务器，在上面从新的主虚机复制出新的影子虚机，以继续对主虚机进行保护。</p><p>K8s 中也有相应的资源冗余机制，ReplicaSets 用于指定一个 Pod 需要运行的实例数量，K8s  会自动维持实例的数量，任何一个实例由于故障原因宕掉了，K8s 马上会自动启动一个新的实例补上。当然两者基本的工作原理是不一样的，K8s  中的所有实例正常情况都是在工作的，在多个实例间均衡工作负载，而不存在主备的概念，这是由云原生应用的本质所决定的。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kuberentes-replicasets.png" alt="kuberentes-replicasets"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>vSphere 并不内置有负载均衡功能，一般是通过虚拟的 (如NSX) 或物理的 (如F5) 负载均衡器来把服务请求平均分配给多台虚机。负载均衡也有多种配置模式，以单肩模式 (one-armed) 为例，我们把网络流量东西向地均衡分配给虚机。</p><p>K8s 中也有类似的概念“Service”，是一组一起协作的 Pod，每个 Pod 都被定义了一个标签选择器 (label  selector)。K8s Service 也有多种配置模式，例如“ClusterIP“模式，每个 Service 都被分配了一个外部可见的静态 IP 地址和 DNS 域名以便于被访问到，负载流量以轮循 (round-robin) 的方式分配给每一个 Pod。其他的模式如  “NodePort” ，以不同端口访问节点的流量会被映射到不同的 Pod；当然也可以配成 “LoadBalancer”  模式来使用外部的负载均衡器。</p><p><img src="%E5%86%99%E7%BB%99VMware%E7%94%A8%E6%88%B7%E7%9C%8B%E7%9A%84Kubernetes%E6%89%AB%E7%9B%B2%E8%B4%B4.assets/kubernetes-services.png" alt="kubernetes-services"></p><p>K8s 还有另外一种非常重要的负载均衡机制 “Ingress Controller”，一个 ingress-controller 以 Pod  的形式存在，并且分配有一个外部可见的 IP 地址，该 IP 地址对应着一个含有通配符的 DNS 记录，ingress-controller  根据预先设定的规则来把流量分配给不同的 Pod。例如下图中的 IP 地址 192.168.100.244 对应 DNS 域名  sphinx-v*.esxcloud.net，访问sphinx-v1.esxcloud.net 的流量会被重定向给  “sphinx-svc-1”，而访问sphinx-v2.esxcloud.net 的流量被重定向给 “sphinx-svc2”。</p>]]></content>
    
    
    <categories>
      
      <category>container</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>VMware</tag>
      
      <tag>vSphere</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改Python镜像源</title>
    <link href="/2022/10/05/%E4%BF%AE%E6%94%B9Python%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2022/10/05/%E4%BF%AE%E6%94%B9Python%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="国内常用的Python镜像源地址"><a href="#国内常用的Python镜像源地址" class="headerlink" title="国内常用的Python镜像源地址"></a>国内常用的Python镜像源地址</h2><p>阿里云Python镜像源：<a href="https://mirrors.aliyun.com/pypi/simple">https://mirrors.aliyun.com/pypi/simple</a></p><p>清华大学Python镜像源：<a href="https://mirrors.tuna.tsinghua.edu.cn/pypi/simple">https://mirrors.tuna.tsinghua.edu.cn/pypi/simple</a></p><p>豆瓣Python镜像源：<a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a></p><h2 id="Windows中设置Python镜像源的方法"><a href="#Windows中设置Python镜像源的方法" class="headerlink" title="Windows中设置Python镜像源的方法"></a>Windows中设置Python镜像源的方法</h2><ul><li><strong>使用pip命令设置：</strong></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip config set global.index-url https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple/<br></code></pre></td></tr></table></figure><ul><li><strong>修改配置文件：</strong></li></ul><ol><li>找到下面的文件（如果没有可以新建一个）</li></ol><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">C:\Users\%user%\AppData\Roaming\pip\pip.ini<br></code></pre></td></tr></table></figure><ol start="2"><li>在文件中添加下面的内容</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[global]<br>index-url = https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/pypi/</span>simple<br></code></pre></td></tr></table></figure><h2 id="Linux中设置Python镜像源的方法"><a href="#Linux中设置Python镜像源的方法" class="headerlink" title="Linux中设置Python镜像源的方法"></a>Linux中设置Python镜像源的方法</h2><ol><li>找到下面的文件</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">~<span class="hljs-regexp">/.pip/</span>pip.conf<br></code></pre></td></tr></table></figure><ol start="2"><li>在上述文件中添加或修改：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[<span class="hljs-keyword">global</span>]<br><span class="hljs-keyword">index</span>-url = https://mirrors.aliyun.com/pypi/simple/<br><br>[install]<br><span class="hljs-keyword">trusted</span>-host = mirrors.aliyun.com<br></code></pre></td></tr></table></figure><p>​</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>镜像源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hugo和GitHub搭建个人博客</title>
    <link href="/2022/10/05/%E4%BD%BF%E7%94%A8Hugo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/05/%E4%BD%BF%E7%94%A8Hugo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、安装配置Hugo"><a href="#1、安装配置Hugo" class="headerlink" title="1、安装配置Hugo"></a>1、安装配置Hugo</h2><p>Hugo是一个Go语言开发的静态网站生成器，可以非常快速的将纯文本转化为静态网站和博客。类似的工具还有Hexo（基于Node.js）和Jekyll（基于Ruby）等。Hugo的优点是运行速度快，不需要安装Node.js等运行环境，使用简单。</p><p>Hugo是Github开源项目，地址：[<a href="https://github.com/gohugoio/hugo]">https://github.com/gohugoio/hugo]</a></p><p>直接下载对应操作系统的压缩包解压即可使用。Mac系统可以直接使用<code>brew install hugo </code>。Windows系统可以将Hugo运行路径加入系统的Path环境变量中，就可以在CMD中直接运行hugo命令。</p><h2 id="2、创建本地站点"><a href="#2、创建本地站点" class="headerlink" title="2、创建本地站点"></a>2、创建本地站点</h2><p>1、在当前目录下生成一个HugoSite目录：<code>hugo new site HugoSite</code></p><p>2、进入themes目录下，添加博客主题。本文使用的主题基于下面两个主题进行修改：</p><p><a href="https://github.com/bjhee/maupassant-hugo">https://github.com/bjhee/maupassant-hugo</a></p><p><a href="https://github.com/rujews/maupassant-hugo">https://github.com/rujews/maupassant-hugo</a></p><p>在HugoSite&#x2F;themes目录下添加主题：<code>git clone https://github.com/rujews/maupassant-hugo</code></p><p>3、修改HugoSite目录下config.toml文件：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">baseURL</span> = <span class="hljs-string">&quot;https://www.cloudarch.tech&quot;</span><br><span class="hljs-attr">languageCode</span> = <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-attr">title</span> = <span class="hljs-string">&quot;CloudArch&quot;</span><br><span class="hljs-attr">theme</span> = <span class="hljs-string">&quot;maupassant-hugo&quot;</span><br><span class="hljs-attr">hasCJKLanguage</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># 中日韩语言支持</span><br><span class="hljs-attr">enableRobotsTXT</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># 爬虫支持</span><br><span class="hljs-attr">PaginatePath</span> = <span class="hljs-string">&quot;page&quot;</span><span class="hljs-comment"># 分页</span><br><span class="hljs-attr">summaryLength</span> = <span class="hljs-number">140</span><span class="hljs-comment"># 摘要显示字数</span><br><br><span class="hljs-section">[author]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># homepage = &quot;&quot;</span><br><br><span class="hljs-section">[params]</span><br><span class="hljs-attr">author</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">subtitle</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">keywords</span> = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attr">busuanzi</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">## 保持分类的原始名字（false会做转小写处理）</span><br><span class="hljs-attr">preserveTaxonomyNames</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">## 是否禁止URL Path转小写</span><br><span class="hljs-attr">disablePathToLower</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-attr">related</span> = <span class="hljs-literal">true</span><span class="hljs-comment"># 是否显示See Also其他文章</span><br><span class="hljs-attr">recentPostNumber</span> = <span class="hljs-number">10</span><span class="hljs-comment"># 右边栏最近文章链接的个数，默认为10</span><br><br><span class="hljs-comment"># customCSS = [&quot;style.extra.css&quot;]</span><br>    <span class="hljs-comment"># customJS = [&quot;app.extra.js&quot;]</span><br><br><span class="hljs-section">[params.utteranc]</span><br><span class="hljs-attr">enable</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">repo</span> = <span class="hljs-string">&quot;splintereddy/cloudarch_comments&quot;</span>    <span class="hljs-comment"># 存储评论的Repo，格式为 owner/repo</span><br><span class="hljs-attr">issueTerm</span> = <span class="hljs-string">&quot;pathname&quot;</span>  <span class="hljs-comment">#表示你选择以那种方式让github issue的评论和你的文章关联。</span><br><span class="hljs-attr">theme</span> = <span class="hljs-string">&quot;github-light&quot;</span> <span class="hljs-comment"># 样式主题，有github-light和github-dark两种</span><br><br><span class="hljs-section">[menu]</span><br><br><span class="hljs-comment"># 博客中主菜单，weight代表排列顺序，数值越小越靠左，最左面是&quot;主页&quot; </span><br><span class="hljs-section">[[menu.main]]</span><br><span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;archives&quot;</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;归档&quot;</span><br><span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/archives/&quot;</span><br><span class="hljs-attr">weight</span> = <span class="hljs-number">8</span><br><span class="hljs-section">[[menu.main]]</span><br>    <span class="hljs-attr">identifier</span> = <span class="hljs-string">&quot;about&quot;</span><br>    <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;关于&quot;</span><br>    <span class="hljs-attr">url</span> = <span class="hljs-string">&quot;/about/&quot;</span><br>    <span class="hljs-attr">weight</span> = <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>4、创建归档页。在HugoSite&#x2F;content目录下创建archives.md文件，文档中添加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;归档&quot;</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;archives&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>5、创建关于页面。在HugoSite&#x2F;content目录下创建about.md文件，文档中添加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;关于&quot;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;about&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>6、创建新博客文章。以.md文档编写博客，放在HugoSite&#x2F;content&#x2F;post目录下。文档开头需要有如下格式：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: &quot;&quot;<br>date: 2019<span class="hljs-string">-01</span><span class="hljs-string">-01</span>T20:21:52<span class="hljs-string">+08</span>:00<br>draft: false<br><span class="hljs-keyword">tags:</span> [&quot;&quot;,&quot;&quot;]<br>categories: [&quot;&quot;]<br>toc: True# 设置是否显示目录<br></code></pre></td></tr></table></figure><h2 id="3、将博客上传到GitHub-Pages"><a href="#3、将博客上传到GitHub-Pages" class="headerlink" title="3、将博客上传到GitHub Pages"></a>3、将博客上传到GitHub Pages</h2><p>1、在HugoSite目录下打开CMD，运行命令<code>hugo</code>，Hugo就会在public目录下自动生成静态页面。</p><p><img src="%E4%BD%BF%E7%94%A8Hugo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.assets/1570177982025.png" alt="1570177982025"></p><p>2、在GitHub中创建一个public repository，将public目录下所有文件上传到github中。在repository的Settings&#x2F;GitHub Pages设置域名，便可以通过此域名访问自己的博客。</p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hugo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器原理</title>
    <link href="/2022/10/05/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <url>/2022/10/05/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包的定义：嵌套函数，且内部函数调用了外部函数的变量时，就构成了闭包。</p><p>下面的例子就是一个函数闭包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">n</span>):<br>    a = n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(a)<br><br>    <span class="hljs-built_in">print</span>(inner.__closure__)<br><br><br>outer()<br></code></pre></td></tr></table></figure><p>闭包的<code>__closure__</code>显示为<code>cell</code></p><p><img src="Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86.assets/e9122198-1bf3-41d3-ae9c-c4581946bfb0.png" alt="e9122198-1bf3-41d3-ae9c-c4581946bfb0">]</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器其实就是闭包的一种应用。装饰器的作用是不改变函数的调用方式，但要在原来的函数前后添加功能。</p><p>装饰器的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_name</span>(<span class="hljs-params">func</span>)= <span class="hljs-comment"># wrapper_name是装饰器函数名字</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment"># 要在被装饰的函数之前添加的功能。eg:</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在函数运行前装饰函数&#x27;</span>)<br><br>        func()<br><br>        <span class="hljs-comment"># 要在被装饰的函数之后添加的功能。eg:</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在函数运行后装饰函数&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数启动&#x27;</span>)<br><br><br>final_func = wrapper_name(func_test)<br>final_func()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数名为：&#x27;</span>, final_func.__name__)<br></code></pre></td></tr></table></figure><p>上面的例子就是一个最简单的装饰器的形式。原函数<code>func_test</code>作为装饰器函数<code>wrapper_name</code>的参数传递到<code>wrapper_name</code>内部定义的<code>inner</code>函数中，即内部函数<code>inner</code>调用了外部函数<code>wrapper_name</code>的参数（这个参数是一个函数对象），并将<code>inner</code>函数自己返回给外部函数<code>wrapper_name</code>，此时便形成了装饰器。</p><p>装饰器的要点：</p><ol><li>被装饰函数作为参数传递给装饰器函数<code>wrapper_name</code>；</li><li>装饰器函数<code>wrapper_name</code>内部需要定义一个内部函数<code>inner</code>，并将被装饰函数作为参数传入<code>inner</code>；</li><li>装饰器函数<code>wrapper_name</code>；需要将内部函数<code>inner</code>作为返回值返回；</li></ol><p>最终装饰器函数<code>wrapper_name</code>执行以后返回值也是一个函数对象，再执行返回的对象便达到了“不改变被装饰函数的原本逻辑，但在原来的函数前后添加功能”的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 下面的调用装饰器函数的方式太繁琐，Python提供了一个语法糖@</span><br>final_func = wrapper_name(func_test)<br>final_func()<br><br><span class="hljs-comment">#### 即变成下面的方式：####</span><br><span class="hljs-meta">@wrapper_name  </span><span class="hljs-comment"># 一定要在被装饰函数定义前调用装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数启动&#x27;</span>)<br><br><span class="hljs-comment"># 直接调用被装饰函数</span><br>func_test()<br><span class="hljs-comment">#### ####</span><br></code></pre></td></tr></table></figure><p>上面的例子的执行结果：</p><p><img src="Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86.assets/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20190828234648.png" alt="QQ拼音截图20190828234648"></p><p>可以发现原函数<code>func_test</code>被装饰以后<code>func.__name__</code>值变成了<code>inner</code>，如果想要被装饰以后函数的<code>.__name__</code>仍为<code>func_test</code>则需要通过下面的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps  <span class="hljs-comment"># 与下面第4行@wraps(func)结合使用</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper_name</span>(<span class="hljs-params">func</span>)= <span class="hljs-comment"># wrapper_name是装饰器函数名字</span><br><span class="hljs-meta">    @wraps(<span class="hljs-params">func</span>)  </span><span class="hljs-comment"># 固定形式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># 要在被装饰的函数之前添加的功能。eg:</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在函数运行前装饰函数&#x27;</span>)<br><br>        ret = func(*args, **kwargs)<br><br>        <span class="hljs-comment"># 要在被装饰的函数之后添加的功能。eg:</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;在函数运行后装饰函数&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> ret<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-meta">@wrapper_name  </span><span class="hljs-comment"># 一定要在被装饰函数定义前调用装饰器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数启动&#x27;</span>)<br><br><br>func_test()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数名为：&#x27;</span>, func_test.__name__)<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86.assets/ec0c9e6a-b22b-441d-99c0-6b78edf35386.png" alt="ec0c9e6a-b22b-441d-99c0-6b78edf35386"></p><p>上面的代码就是装饰器的一般形式。</p><p>多个装饰器装饰同一个函数时，先执行距离被装饰函数最近的装饰器（即写在最下面的装饰器），装饰后的结果再作为被装饰函数继续被上面的装饰器进行装饰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@wrapper1 </span><span class="hljs-comment">#一定要在被装饰函数定义前调用装饰器</span><br><span class="hljs-meta">@wrapper2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">funcTest</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数启动&#x27;</span>)<br><br>funcTest()<br></code></pre></td></tr></table></figure><p><img src="Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8E%9F%E7%90%86.assets/792eec98-4d32-491f-bca4-652b81640b6f.png" alt="792eec98-4d32-491f-bca4-652b81640b6f"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python字符串内置方法</title>
    <link href="/2022/10/05/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <url>/2022/10/05/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>strip()函数用于清除字符串首尾的所有空格，也可以用来清除首尾的指定字符，返回值为对字符串进行操作后产生的<strong>新字符串</strong>（原字符串仍然存在未被修改）。</p><p>split()函数用来根据分隔符（如空格，“&#x2F;” 或其他指定符号）将字符串进行切分，返回值为包含分割后字符串的list。<strong>分隔符默认为无，则根据任何空白符号（空格、回车、tab）分割字符串并丢弃所有空字符</strong>。</p><p>删除或替换字符串中多个指定字符可以使用translate()方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment"># 删除字符串中所有‘@’ ‘o’ 和‘1’</span><br>str_a = <span class="hljs-string">&#x27;p@ssword1&#x27;</span><br>str_b = str_a.translate(<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;@o1&#x27;</span>)<br><br><span class="hljs-comment"># 将字符串中&#x27;a&#x27; &#x27;o&#x27; &#x27;1&#x27; 分别替换为&#x27;@&#x27; &#x27;0&#x27; &#x27;!&#x27;</span><br>str_a = <span class="hljs-string">&#x27;password1&#x27;</span><br>table = string.maketrans(<span class="hljs-string">&#x27;ao1&#x27;</span>, <span class="hljs-string">&#x27;@0!&#x27;</span>)<br>str_b = str_a.translate(table)<br><br><span class="hljs-comment"># 若同时使用.translate()方法的替换和删除功能时先删除，再替换。即：</span><br>str_a = <span class="hljs-string">&#x27;password1&#x27;</span><br>table = string.maketrans(<span class="hljs-string">&#x27;ao1&#x27;</span>, <span class="hljs-string">&#x27;@0!&#x27;</span>)<br>str_b = str_a.translate(table, <span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment"># str_b为 &#x27;pssw0rd!&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文本处理</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python函数参数</title>
    <link href="/2022/10/05/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/"/>
    <url>/2022/10/05/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#可传入任何参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>(<span class="hljs-params">*args,**kwargs</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 不定长参数，可传入多个参数，传入的值组成一个元组tuple</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function2</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 传入的参数为多个关键字参数,组成一个字典dict</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function3</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">pass</span><br>function3(key1=a,key2=b,key3=c)<br><br><span class="hljs-comment"># 匿名函数Lamda</span><br><span class="hljs-comment"># lamda只能有一行</span><br><span class="hljs-comment"># lamda arg1,arg2,……argn:函数表达式</span><br><span class="hljs-built_in">sum</span>=lamda num1, num2:num1+num2<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*arg, **kw</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kw.items():<br>            <span class="hljs-keyword">if</span> i == k:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;My name is &#123;k&#125;,I am &#123;v&#125; years old.&#x27;</span>.<span class="hljs-built_in">format</span>(k=k, v=v))<br><br><span class="hljs-built_in">str</span> = [<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;eddy&#x27;</span>]<br>kw = &#123;<span class="hljs-string">&#x27;eddy&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;tom&#x27;</span>: <span class="hljs-number">20</span>&#125;<br><br>func(*<span class="hljs-built_in">str</span>, **kw)<br><br><br><span class="hljs-comment"># 输出结果：</span><br><span class="hljs-comment"># My name is tom,I am 20 years old.</span><br><span class="hljs-comment"># My name is eddy,I am 18 years old.</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基础原理</title>
    <link href="/2022/10/05/Docker%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    <url>/2022/10/05/Docker%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>Docker与传统虚拟化的区别：</p><ul><li>虚拟化是硬件资源划分的方案，采用Intel VT-x等硬件虚拟化技术；Docker是操作系统级别的虚拟化，Docker没有传统虚拟化中的Hypervisor层，其虚拟化技术是基于内核的<strong>Cgroup</strong>和<strong>Namespace</strong>技术。</li><li>Docker容器与主机共享操作系统内核，不同容器之间可以共享部分系统资源；而虚拟机会独占分配给自己的资源，资源隔离更彻底。</li></ul><p>容器的核心技术是Cgroup+Namespace。</p><p>容器: cgroup+namespace+rootfs+容器引擎（用户态工具）：</p><ul><li>Namespace又被称为命名空间，主要做<strong>访问隔离</strong>。原理是针对一类资源进行抽象和封装，提供给一个容器使用。</li><li>Cgroup（control group）主要做<strong>资源控制</strong>。原理是将一组<strong>进程</strong>放在一个控制组里，通过给这个控制组分配指定的可用资源，达到控制这一组进程可用资源的目的。</li><li>rootfs：文件系统隔离。</li><li>容器引擎：生命周期控制。</li></ul><p>目前LInux内核共实现了6种Namespace：</p><ol><li>IPC（进程间通信）：IPC Namespace使相同的标识符在两个Namespace中代表不同的消息队列，因而使两个Namespace中的进程不能通过IPC通信。</li><li>Network</li><li>Mount：文件系统挂载点</li><li>PID：用于隔离进程ID。每个PID Namespace中第一个进程PID是1，也就是init进程。init进程负责回收所有孤儿进程的资源，发送给Init进程的信号都会被屏蔽。</li><li>UTS：主机名和域名</li><li>User：用户ID和组ID</li></ol>]]></content>
    
    
    <categories>
      
      <category>container</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>virtualization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWK和SED常用命令</title>
    <link href="/2022/10/05/AWK%E5%92%8CSED%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/10/05/AWK%E5%92%8CSED%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong>使用awk过滤输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps|awk <span class="hljs-string">&#x27;NR!=1 &#123;print $1&#125;&#x27;</span><br><span class="hljs-comment"># 作用：过滤docker ps输出的结果，只显示第一列Container ID的值，且不显示第一行”Container ID“</span><br><span class="hljs-comment"># NR!=1表示过滤掉第一行，NR==1表示只匹配第一行。END表示最后一行</span><br><span class="hljs-comment"># awk默认以空格为分隔符对每一行进行切片，$0表示所有内容，$1表示（以空格分割的）第一列。$NF表示最后一列</span><br><br><span class="hljs-comment"># eg:打印file1中最后一行最后一列</span><br>awk <span class="hljs-string">&#x27;END &#123;print $NF&#125;&#x27;</span> file1.txt<br></code></pre></td></tr></table></figure><p><strong>使用sed处理文件内容：</strong></p><p>-i 表示直接修改文件中的内容，如果没有-i则只将处理后的内容输出到console，但原文件中内容未改变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除文件中空白行</span><br>sed -i <span class="hljs-string">&#x27;/^$/d&#x27;</span> file1.txt<br><span class="hljs-comment"># 删除文件中最后一行的内容</span><br>sed -i <span class="hljs-string">&#x27;$d&#x27;</span> file1.txt<br><span class="hljs-comment"># 删除文件中第一行到第三行（注意，共删除1，2，3三行的内容）</span><br>sed -i <span class="hljs-string">&#x27;1,3d&#x27;</span> file1.txt<br><br><span class="hljs-comment"># 向文件中第3行后面追加一行内容hello world</span><br><span class="hljs-comment">#（append模式，原文件第4行变为第5行，依次类推……）</span><br>sed -i <span class="hljs-string">&#x27;3a hello world&#x27;</span> file1.txt<br><span class="hljs-comment"># 向文件第1行插入内容。insert模式。原文件第1行变为第2行</span><br>sed -i <span class="hljs-string">&#x27;1i hello world&#x27;</span> file1.txt<br><br><span class="hljs-comment"># 将文件中第2到第5行的内容全部替换为hello world</span><br>sed -i <span class="hljs-string">&#x27;2,5c hello world&#x27;</span> file1.txt<br><br><span class="hljs-comment"># 将文件中所有hello替换为goodbye，g代表替换所有匹配到的值，没有则只匹配并替换第1个</span><br>sed -i <span class="hljs-string">&#x27;s/hello/goodbye/g&#x27;</span> file1.txt<br><br><span class="hljs-comment"># 输出文件第2到第5行</span><br>sed -n <span class="hljs-string">&#x27;2,5p&#x27;</span> file1.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>awk</tag>
      
      <tag>sed</tag>
      
      <tag>shell</tag>
      
      <tag>文本处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/05/hello-world/"/>
    <url>/2022/10/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
